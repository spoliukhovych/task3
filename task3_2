#include <iostream>
using namespace std;

class BinTree {
public:
    int data;
    BinTree* left;
    BinTree* right;
};

BinTree* newNode(int data)
{
    BinTree* temp = new BinTree();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

BinTree* constructTreeUtil(int pre[], int* preIndex, int low,
    int high, int size)
{

    if (*preIndex >= size || low > high)
    {
        return NULL;
    }

    BinTree* root = newNode(pre[*preIndex]);
    *preIndex = *preIndex + 1;

    if (low == high)
    {
        return root;
    }

    int i;
    for (i = low; i <= high; ++i)
    {
        if (pre[i] > root->data)
            break;
    }

    root->left = constructTreeUtil(pre, preIndex, *preIndex,
        i - 1, size);
    root->right
        = constructTreeUtil(pre, preIndex, i, high, size);

    return root;
}

BinTree* constructTree(int pre[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, &preIndex, 0, size - 1,
        size);
}

void printInorder(BinTree* node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    setlocale(LC_ALL, "ru");

    int pre[] = { 10, 5, 1, 7, 40, 50 };
    int size = sizeof(pre) / sizeof(pre[0]);

    BinTree* root = constructTree(pre, size);

    cout << "Симметричный обход: " << endl;
    printInorder(root);

    return 0;
}
